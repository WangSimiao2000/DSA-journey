#include <iostream>
#include <vector>

using namespace std;

/* 带约束爬楼梯 */
/*
给定一个共有 n 阶的楼梯，你每步可以上 1 阶或者 2 阶，但不能连续两轮跳 1 阶，请问有多少种方案可以爬到楼顶？
*/

/*
下一步选择不能由当前状态（当前所在楼梯阶数）独立决定，还和前一个状态（上一轮所在楼梯阶数）有关:
状态转移方程 dp[i] = dp[i-1] + dp[i-2] 也不再适用, 因为 dp[i] 依赖于 dp[i-1] 和 dp[i-2]，而 dp[i-1] 依赖于 dp[i-2]，所以 dp[i] 依赖于 dp[i-2]，不再是独立的

状态 [i,j]  表示处在第 i 阶并且上一轮跳了 j 阶，其中 j∈{1,2}。此状态定义有效地区分了上一轮跳了 1 阶还是 2 阶，我们可以据此判断当前状态是从何而来的
- 如果 j=1 (上一轮跳了1阶)，那么上上一轮只能跳了 2 阶，即dp[i,1] 只能从 dp[i-1,2] 转移过来
- 如果 j=2 (上一轮跳了2阶)，那么上上一轮可以跳了 1 阶或者 2 阶，即dp[i,2] 可以从 dp[i-1,1] 或者 dp[i-1,2] 转移过来

状态转移方程:
dp[i,1] = dp[i-1,2]
dp[i,2] = dp[i-1,1] + dp[i-1,2]
*/

/* 带约束爬楼梯：动态规划 */
int climbingStairsConstraintDP(int n) {
    if (n == 1 || n == 2) {
        return 1;
    }
    // 初始化 dp 表，用于存储子问题的解
    vector<vector<int>> dp(n + 1, vector<int>(3, 0));
    // 初始状态：预设最小子问题的解
    dp[1][1] = 1; // 总共 1 阶，上一轮跳了 1 阶
    dp[1][2] = 0; // 总共 1 阶，上一轮跳了 2 阶
    dp[2][1] = 0; // 总共 2 阶，上一轮跳了 1 阶
    dp[2][2] = 1; // 总共 2 阶，上一轮跳了 2 阶
    // 状态转移：从较小子问题逐步求解较大子问题
    for (int i = 3; i <= n; i++) {
        dp[i][1] = dp[i - 1][2];
        dp[i][2] = dp[i - 2][1] + dp[i - 2][2];
    }
    return dp[n][1] + dp[n][2];
}

int main() {
    int n = 5;
    cout << climbingStairsConstraintDP(n) << endl;  // 3
    return 0;
}